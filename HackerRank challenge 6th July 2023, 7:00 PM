2. Print N stars
Given an integer N, print N stars in a single line.
For example if N = 5 then pattern will be like:
________________________________________
Input Format
Single line input contains a single integer N.
Constraints
2 <= N <= 100
Output Format
Output N stars in a single line.
Sample Input 0
3
Sample Output 0
***
import java.io.*;
import java.util.*;
import java.util.Scanner;
public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc;
        sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
            System.out.print("*");
        }
    }
}
2.  Print a matrix of stars
Given two integers N and M as inputs, print a rectangle of N * M stars.
For example if N = 3, M = 4 then pattern will be like:
________________________________________
________________________________________
________________________________________
Input Format
First line of input contains an integers N (no of rows).
Second line of input contains an integer M (no of cols).
Constraints
2 <= N, M <= 100
Output Format
Output N * M rectangle of stars.
Sample Input 0
2
3
Sample Output 0
***
***
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
3. Stair Pattern 1
Take an integer N as input, print the corresponding stair pattern for N.
Input Format
First and only line of input contains a single integer N.
Constraints
1
Output Format
Output the stair pattern corresponding to the given N.
Sample Input 0
4
Sample Output 0
*
**
***
****
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=1;i<=n;i++){
            for(int j=1;j<=i;j++){
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
4. Skip Even Numbers Half Pyramid
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=1;i<=n;i++){
            for(int j=1;j<=i;j++){
                if(j%2==0){
                    System.out.print(" ");
                } else {
                    System.out.print(j);
                }
            }
            System.out.println();
        }
    }
}
5. Two Line Star Pattern
Print a pattern consisting of N rows, where each row contains an asterisk (*) at the beginning and end of the line, with N-2 spaces in between.
The Pattern should look like:
Print the above pattern for a total of N Rows.
Refer Example ouput, for better clarification.
Input Format
First and only line of input contains a single integer N.
Constraints
1<=N<=100
Output Format
Output the pattern corresponding to the given N.
Sample Input 0
4
Sample Output 0
*  *
*  *
*  *
*  *
Explanation 0
Here N = 4, So each row should have N - 2 spaces which is 2. Thus the N rows(i.e, 4 rows) should be in the form (asterisk)(2 spaces)(asterisk)
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    
        Scanner sc=new Scanner(System.in);
       
        int n=sc.nextInt();
    for(int row=1;row<=n;row++){
        for(int col=1;col<=n;col++){
            if(col==1||col==n){
                System.out.print("*");
            } else {
                System.out.print(" ");
            }
        }
        System.out.println();
    }
        
    }
}

6. Leading spaces pyramid
Take an integer N as input, print the corresponding pattern for N.
Input Format
First and only line of input contains a single integer N.
Constraints
1 <= N <= 100
Output Format
Output the pattern corresponding to the given N.
Sample Input 0
2
Sample Output 0
 *
**
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
       Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();  
            //inner loop  
            for (int i= 1; i<= n; i++)  
            {  
            //outer loop  
            for (int j=0; j<n-i; j++)  
            {  
            System.out.print(" ");  
            }  
            for (int k=1;k<=i;k++)  
            {  
            System.out.print("*");  
            }   
            System.out.println("");  
            } 
    }
}
7. From top to down
Write a program to print all Natural numbers from 1 to N where you have to take N as input from user
Input Format
A single line representing N
Constraints
1 <= N <= 1000000
Output Format
N space separated integers from 1 to N.
Sample Input 0
3
Sample Output 0
1 2 3
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        for(int i=1;i<=N;i++){
            System.out.print(i+" ");
        }
    }
}
8. Odd Game 1
Write a program to print all odd numbers from 1 to N where you have to take N as input from user. Here N is inclusive.
Input Format
A single line representing N
Constraints
1 <= N <= 2000000
Output Format
All odd numbers from 1 to N separated by spaces.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=1;i<=n;i++){
            if(i%2==0){
                System.out.print(" ");
            }
            else {
                System.out.print(i);
            }
        }
    }
}
9. Summation Game
Write a program to find sum all Natural numbers from 1 to N where you have to take N as input from user
Input Format
A single line representing N
Constraints
NA
Output Format
A single integer showing sum of all Natural numbers from 1 to N
Sample Input 0
5
Sample Output 0
15
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        int sum=0;
        for(int i=1;i<=N;i++){
            sum+=i;
        }
        System.out.println(sum);
       }
}
10. From down to top
Write a program to print all Natural numbers from N to 1 where you have to take N as input from user
Input Format
A single line representing N
Constraints
1 <= N <= 10000000
Output Format
N space separated integers from N to 1.
Sample Input 0
5
Sample Output 0
5 4 3 2 1
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        for(int i=N;i>=1;i--){
            System.out.print(i+" ");
        }
    }
}
11. Multiplication Table 52
Write a program to print the multiplication table of the number entered by the user, N.
The table for input N = 5 should get displayed in the following form:
5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 5 * 10 = 50
Input Format
First and only line of input contains an integer N.
Constraints
1 <= N <= 100
Output Format
Output the Multiplication Table in the given form.
Sample Input 0
5
Sample Output 0
5 * 1 = 5
5 * 2 = 10
5 * 3 = 15
5 * 4 = 20
5 * 5 = 25
5 * 6 = 30
5 * 7 = 35
5 * 8 = 40
5 * 9 = 45
5 * 10 = 50
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N = sc.nextInt();
        for(int i=1;i<=10;i++){
            int mul=N*i;
            System.out.print(N+" "+"* "+i+" = ");
            System.out.println(mul);
        }
    }
}
12. Easy Power
You are given two integers A and B. You have to find the value of A^B.
NOTE: The value of A^B will always be less than or equal to 10^9.
Input Format
First line of the input contains a single integer A.
Second line of the input contains a single integer B.
Constraints
1 <= A, B <= 1000
Output Format
Print a single integer in single line.
Sample Input 0
2
3
Sample Output 0
8
Explanation 0
For A = 2 and B = 3, the value of 2^3 = 2 * 2 * 2 = 8.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int power=1;
        int A=sc.nextInt();
        int B=sc.nextInt();
        for(int i=1;i<=B;i++){
            power=power*A;
        }
        System.out.println(power);
    }
}
13. Count factor
Take an integer N as input and print the count of its factors. The factor of a number is the number that divides it perfectly leaving no remainder.
Example: 1, 2, 3, and 6 are factors of 6
Input Format
The first and only line of input contains a single integer N.
Constraints
1 <= N <= 300
Output Format
Print the count of factors of N.
Sample Input 0
5
Sample Output 0
2
Explanation 0
Factors of 5 are 1 and 5.
Sample Input 1
10
Sample Output 1
4
Explanation 1
Factors of 10 are 1, 2, 5 and 10.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int c=0;
        int N=sc.nextInt();
        for(int i=1;i<=N;i++){
            if(N%i==0)
                c++;
        }
        System.out.println(c);
    }
}
14. is it Prime? 2
Take an integer A as input, you have to tell whether it is a prime number or not.
A prime number is a natural number greater than 1 which is divisible only by 1 and itself.
Input Format
First and only line of the input contains a single integer A.
Constraints
1 <= A <= 106
Output Format
Print YES if A is a prime, else print NO.
Sample Input 0
3
Sample Output 0
YES
Explanation 0
3 is a prime number as it is only divisible by 1 and 3.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int A=sc.nextInt();
        int k=1;
        if(A==1|| A==0){
            System.out.println("NO");
        }
        else{
        for(int i=2;i<=A/2;i++)
            if(A%i==0){
                k=0;
                break;
            }
        else {
            k=1;
        }
        if(k==1){
            System.out.println("YES");
        }
        else {
            System.out.println("NO");
        }
        }
    }
}

    15. Is It Perfect? 1
Given the Number of Test Cases as T, For each test case, take an integer N as input, you have to tell whether it is a perfect number or not.
A perfect number is a positive integer that is equal to the sum of its proper positive divisors (excluding the number itself). A positive proper divisor divides a number without leaving any remainder.
Input Format
The first line of the input contains a single integer T. Each of the next T lines contains a single integer N.
Constraints
1 <= T <= 10 1 <= N <= 106
Output Format
For each testcase, print YES if the given integer is perfect, else print NO, in a separate line
Sample Input 0
2
4
6
Sample Output 0
NO
YES
Explanation 0
For the first test case A = 4, the answer is "NO" as sum of its proper divisors = 1 + 2 = 3, is not equal to 4. For the second test case A = 6, the answer is "YES" as sum of its proper divisors = 1 + 2 + 3 = 6, is equal to 6.
Sample Input 1
1
3
Sample Output 1
NO
Explanation 1
For the first test case A = 3, the answer is "NO" as sum of its proper divisors = 1, is not equal to 3.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int T=sc.nextInt();
        for(int k=1;k<=T;k++){
            
              int N=sc.nextInt();
            int sum=0;
        for(int i=1;i<N;i++){
            if(N%i==0){
                sum+=i;
            }
            
        }
        if(sum==N){
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
        }
    }
} 
16. Count the digits 2
Take T (number of test cases) as input. For each test case, take integer N as input and Print the count of digits of that number.
Note: No of digits for number 0 is considered as 1.
Input Format
The first line is the number T which denotes the total number of test cases. Next T lines contain an integer N for which you have to print the number of digits.
Constraints
NA
Output Format
For T different Numbers, Print the number of digits in separate lines.
Sample Input 0
2
0
1
Sample Output 0
1
1
Explanation 0
0 and 1 both have only one digit.
Sample Input 1
2
100
10101
Sample Output 1
3
5
Explanation 1
100 has three digits and 10101 has 5 digits.
import java.io.*;
import java.util.*;

public class Solution {
    public int count =0;
    
    static int countDigit(int n)
    {
        
//    while(n==0) {
//    count++;
//System.out.println(count);
//break;
//    }
        Solution ob=new Solution();
       while (n != 0) {
       
            n = n / 10;
            ++ob.count;
        }
        return ob.count;
    }
    public static void main(String [] args) {
        Scanner sc=new Scanner(System.in);
        int i;
                                   int T=sc.nextInt();
       int[] arr=new int[20];
       for(i=0;i<T;i++) {
           arr[i] = sc.nextInt();
       }
        for(i=0;i<T;i++) {
            if(arr[i]==0) {
                Solution ob=new Solution();
                ++ob.count;
                System.out.println(ob.count);
            }
            else {
            System.out.println(countDigit(arr[i]));
            }
            }
    }

}
17. Reverse integer 16
You are given an integer N and the task is to reverse the digits of the given integer. Return 0 if the result overflows and does not fit in a 32 bit signed integer
Look at the example for clarification.
Input Format
Input an Integer
Constraints
N belongs to the Integer limits.
Output Format
Return a single integer denoting the reverse of the given integer.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N =sc.nextInt();
        int reverse = 0;  
while(N != 0)   
{  
int remainder = N % 10;  
reverse = reverse * 10 + remainder;  
N = N/10;  
}  
System.out.println(reverse);  
    }
}
18.  Armstrong Numbers!
You are given an integer N you need to print all the Armstrong Numbers between 1 to N. (N inclusive).
If sum of cubes of each digit of the number is equal to the number itself, then the number is called an Armstrong number.
For example, 153 = ( 1 * 1 * 1 ) + ( 5 * 5 * 5 ) + ( 3 * 3 * 3 ).
Note: All the test cases in this problem are limited to 3 digit numbers.
Input Format
First and only line of input contains an integer N.
Constraints
1 <= N <= 500
Output Format
Output all the Armstrong numbers in range [1,N] each in a new line.
Sample Input 0
20
Sample Output 0
1
Explanation 0
1 is an armstrong number.
Sample Input 1
200
Sample Output 1
1
153
Explanation 1
1 and 153 are armstrong number under 200.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        int N;
        int i;
        Scanner scanner;
        scanner = new Scanner(System.in);
        
        N = scanner.nextInt();
         
        for (i = 1; i < N; i++) {
            if (isArmstrongNumber(i)) {
                System.out.println(i + " ");
            }
        }
    }
 
    public static boolean isArmstrongNumber(int num) {
        int sum = 0, rightDigit, temp;
        temp = num;
        while (temp != 0) {
            rightDigit = temp % 10;
            sum = sum + (rightDigit * rightDigit * rightDigit);
            temp = temp / 10;
        }
 
        if (sum == num) {
            // N is armstrong number
            return true;
        } else {
            // N is not an armstrong number
            return false;
        }
    }
}
19. Print the Primes!
You are given an integer N you need to print all the Prime Numbers between 1 and N.
Prime numbers are numbers that have only 2 factors: 1 and themselves. For example, the first 5 prime numbers are 2, 3, 5, 7, and 11.
Input Format
First and only line of input contains a single integer N.
Constraints
1 <= N <= 300
Output Format
Print all the prime numbers between between 1 and N each in a new line.
Sample Input 0
5
Sample Output 0
2
3
5
Explanation 0
Prime numbers between [1, 5] are (2, 3, 5).
Sample Input 1
10
Sample Output 1
2
3
5
7
Explanation 1
Prime numbers between [1, 10] are (2, 3, 5, 7)
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        int i,counter, j;
      for(j=2;j<=N;j++){
         counter=0;
         for(i=1;i<=j;i++){
            if(j%i==0){
               counter++;
            }
         }
         if(counter==2)
         System.out.println(j);
      }
    }
}
20 .   LCM - Easy
Implement a program that takes two positive integers A and B in the input and prints their LCM.
Definition of LCM : The Least Common Multiple or LCM of two numbers say A and B, is denoted as LCM (A,B). And the LCM is the smallest or least positive integer that is divisible by both A and B.
Input Format
Two space separated integers A and B in the input.
Constraints
1 <= A,B <= 200
Output Format
Output a single integer that is the LCM of A and B.
Sample Input 0
5
10
Sample Output 0
10
Explanation 0
LCM(5,10)=10
Sample Input 1
2
3
Sample Output 1
6
Explanation 1
LCM(2,3)=6
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int A=sc.nextInt();
        int B=sc.nextInt();
        int lcm;
        lcm=(A>B)? A:B;
        // Always true
    while(true) {
      if( lcm % A == 0 && lcm % B == 0 ) {
        System.out.print(lcm);
        break;
      }
      ++lcm;
    }
    }
}
21. Palindromic Integer 2
You are given an integer A as input and you need to determine whether it is a palindrome or not. A palindrome integer is one whose digits, when reversed, result in the same number. For example, 121 is a palindrome because its reverse is also 121, but 123 is not a palindrome because its reverse is 321.
Note: The given integer will not have any leading zeros.
Input Format
First and the only line contains a single integer A.
Constraints
1 <= A <= 10^6
Output Format
Print Yes if it is palindromic, else print No.
Sample Input 0
120
Sample Output 0
No
Explanation 0
For A = 120, reverse(A) = reverse(120) = 021 = 21 (removing leading zeroes). 120 is not equal to 21
Sample Input 1
1001
Sample Output 1
Yes
Explanation 1
For A = 1001, reverse(A) = reverse(1001) = 1001, which is same as A.
Sample Input 2
1001
Sample Output 2
Yes
Explanation 2
For A = 1001, reverse(A) = reverse(1001) = 1001, which is same as A.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int A=sc.nextInt();
        int r,sum=0,temp; 
         temp=A;    
       while(A>0){    
       r=A%10;  //getting remainder  
       sum=(sum*10)+r;    
       A=A/10;    
  }    
       if(temp==sum)    
      System.out.println("Yes");    
      else    
       System.out.println("No"); 
    }
}
22. Inverted Half Pyramid 1
Given an integer N, print the corresponding Inverted Half Pyramid pattern for N.
Input Format
First and only line of input contains a single integer N.
Constraints
NA
Output Format
Output the Inverted Half Pyramid pattern corresponding to the given N.
Sample Input 0
5
Sample Output 0
*****
****
***
**
*
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
       for (int i = N; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
23. Leading spaces inverted pyramid
Take an integer N as input, print the corresponding pattern for N. please see the sample test case to get clear undestanding of test case
Input Format
First and only line of input contains a single integer N.
Constraints
1<=N<=100
Output Format
Output the pattern corresponding to the given N.
Sample Input 0
2
Sample Output 0
**
 *
Explanation 0
** _*
Note : Here '_' represents space for explanation purpose only. You have to print space in your code.
Sample Input 1
3
Sample Output 1
***
 **
  *
Explanation 1
________________________________________
** _* Note : Here '_' represents space for explanation purpose only. You have to print space in your code.
Sample Input 2
4
Sample Output 2
****
 ***
  **
   *
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc = new Scanner(System.in); // takes input
    
    int N = sc.nextInt();
    for (int i= N; i>= 1; i--)
    {
    for (int j=N; j>i;j--)
    {
    System.out.print(" ");
    }
    for (int k=1;k<=i;k++)
    {
    System.out.print("*");
    }
    System.out.println("");
    }
    sc.close();
    }
}
24. Star Pattern II
Write a program to input an integer N from user and print hollow inverted right triangle star pattern of N lines using '*'.
See example for clarifications.
Input Format
First line is an integer N
Constraints
1 <= N <= 1000
Output Format
N lines conatining only char '*' as per the question.
Sample Input 0
5
Sample Output 0
*****
*  *
* *
**
*
Sample Input 1
4
Sample Output 1
****
* *
**
*
import java.io.*;
import java.util.*;
public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
       for(int i=n;i>0;i--){
           if(i==1||i==n)
               for(int j=1;j<=i;j++){
                   System.out.print("*");
               }
           else 
           { for(int j=1;j<=i;j++){
               if(j==1||j==i)
                   System.out.print("*");
               else
                   System.out.print(" ");
           }
           }
           System.out.println();
       }
           }
}
25. Photo Frame Pattern
Take an integer N as input, print the corresponding pattern for N.
Input Format
First and only line of input contains a single integer N.
Constraints
N is within range
Output Format
Output the pattern corresponding to the given N.
Sample Input 0
3
Sample Output 0
***
* *
***
Explanation 0
Note : Except for the first line and the last line, every line will have N-2 spaces between the two stars.
Sample Input 1
5
Sample Output 1
*****
*   *
*   *
*   *
*****
Explanation 1
Note : Except for the first line and the last line, every line will have N-2 spaces between the two stars.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        for(int i=1;i<=N;i++)
        {
            for(int j=1;j<=N;j++)
            {
                if(i==1 || i==N || j==1 || j==N)
                {
                    System.out.print("*");
                }
                else
                {
                    System.out.print(" ");
                }
            }
            
            System.out.println();
        }
    }
}
